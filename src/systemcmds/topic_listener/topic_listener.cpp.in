/****************************************************************************
 *
 *   Copyright (c) 2015-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file topic_listener.cpp
 *
 * Autogenerated by Tools/generate_listener.py using
 * template src/systemcmds/topic_listener/topic_listener.cpp.in
 *
 * Tool for listening to topics when running flight stack on linux.
 */

#include <drivers/drv_hrt.h>
#include <px4_middleware.h>
#include <px4_app.h>
#include <px4_config.h>
#include <px4_log.h>
#include <px4_posix.h>
#include <uORB/uORB.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

${include_topics}

#ifndef PRIu64
#define PRIu64 "llu"
#endif

#ifndef PRId64
#define PRId64 "lld"
#endif


class Topic
{
public:
	Topic(orb_id_t id) :
		_id(id),
		_data(nullptr),
		_sub(-1),
		_times_printed(0)
	{
		subscribe();
	}

	virtual ~Topic()
	{
		unsubscribe();
	}

	int get_fd()
	{
		return _sub;
	}

	unsigned times_printed()
	{
		return _times_printed;
	}

	bool exists()
	{
		return (orb_exists(_id, 0) == 0);
	}

	bool update()
	{
		bool updated = false;
		orb_check(_sub, &updated);
		if (updated) {
			orb_copy(_id, _sub, _data);
			return true;
		} else {
			return false;
		}
	}

	void print()
	{
		print_specific();
		++_times_printed;
	}
	virtual void print_specific() = 0;

protected:
	void subscribe()
	{
		_sub = orb_subscribe(_id);
	}

	void unsubscribe()
	{
		orb_unsubscribe(_sub);
	}

	orb_id_t _id;
	void *_data; // data is set by the child class
private:
	int _sub;
	unsigned _times_printed;
};


${topic_classes}

static Topic *make_topic(const char *name)
{
	Topic *topic = nullptr;
${factory}
	return topic;
}


extern "C" __EXPORT int listener_main(int argc, char *argv[]);

int listener_main(int argc, char *argv[]) {
	if(argc < 2) {
		PX4_WARN("need at least two arguments: topic name. [optional number of messages to print]");
		return 1;
	}

	bool infinite_output = true;
	unsigned num_msgs = 0;

	if (argc > 2) {
		num_msgs = atoi(argv[2]);
		infinite_output = false;
	}

	(void)infinite_output;
	(void)num_msgs;

	Topic *topic = make_topic(argv[1]);

	if (topic == nullptr) {
		PX4_ERR("Topic \"%s\" not found", argv[1]);
		return 1;
	}

	struct pollfd fds;
	fds.fd = 0; /* stdin */
	fds.events = POLLIN;

	// Print it once if available
	if (topic->exists()) {
		topic->update();
		PX4_INFO("Topic: %s (%d)", argv[1], topic->times_printed());
		topic->print();
	} else {
		PX4_ERR("topic does not exist yet");
		delete topic;
		return 0;
	}

	while (infinite_output || topic->times_printed() < num_msgs) {

		int ret = ::poll(&fds, 1, 0);

		if (ret > 0 ) {
			char c;
			ret = read(0, &c, 1);

			if (ret) {
				delete topic;
				return 1;
			}

			switch (c) {
			case 0x03: // ctrl-c
			case 0x1b: // esc
			case 'c':
			case 'q':
				delete topic;
				return 0;
			}
		}

		if (topic->update()) {
			PX4_INFO("Topic: %s (%d)", argv[1], topic->times_printed());
			topic->print();
		}
		// rate limit this to 100 Hz max
		usleep(10000);
	}

	delete topic;
	return 0;
}
